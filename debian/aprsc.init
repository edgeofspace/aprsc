#! /bin/sh

# update-rc.d aprsc defaults 84

### BEGIN INIT INFO
# Provides:       aprsc
# Required-Start: $syslog $network $local_fs
# Required-Stop:  $syslog $local_fs
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Short-Description: start and stop aprsc
# Description: Provide an APRS-IS server for the amateur radio APRS network
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
BASEDIR=/opt/aprsc
DAEMON=$BASEDIR/sbin/aprsc
CONFIG_DIR=$BASEDIR/etc
LOG_DIR=$BASEDIR/logs
NAME=aprsc
DIRNAME=aprsc
DESC="APRS-IS server"
AUTOSTART="all"

test -x $DAEMON || exit 0
test -d $CONFIG_DIR || exit 0

. /lib/lsb/init-functions

# Include aprsc defaults if available
if [ -f /etc/default/$NAME ] ; then
	. /etc/default/$NAME
fi

if [ "$STARTAPRSC" != "yes" ];then
	echo "Starting of $NAME not enabled in /etc/default/$NAME."
	exit 0
fi

# copy files required for chrooted operation
prepare_chroot () {
	log_daemon_msg "Preparing chroot for $DESC:" "aprsc chroot"
	# config files
	/bin/cp -p /etc/resolv.conf /etc/nsswitch.conf /etc/hosts /etc/gai.conf $BASEDIR/etc/
	# live upgrade requires libraries to be visible within chroot, so
	# set up a read-only bind mount of /lib
	grep -q "$DIRNAME/lib " /proc/mounts || \
		( mount --bind /lib $BASEDIR/lib \
		&& mount -o remount,ro,bind $BASEDIR/lib )
	if [ -e /lib64 ]; then
		grep -q "$DIRNAME/lib64 " /proc/mounts || \
			( mount --bind /lib64 $BASEDIR/lib64 \
			&& mount -o remount,ro,bind $BASEDIR/lib64 )
	fi
	grep -q "$DIRNAME/usr/lib " /proc/mounts || \
		( mount --bind /usr/lib $BASEDIR/usr/lib \
		&& mount -o remount,ro,bind $BASEDIR/usr/lib )
	if [ -e /usr/lib64 ]; then
		grep -q "$DIRNAME/usr/lib64 " /proc/mounts || \
			( mount --bind /usr/lib64 $BASEDIR/usr/lib64 \
			&& mount -o remount,ro,bind $BASEDIR/usr/lib64 )
	fi
	log_end_msg 0
}

# set up command-line options for an aprsc instance
prepare_opts () {
	CFGNAME=`echo $NAME|sed -e 's/aprsc-//'`
	PIDNAME=$NAME
	
	if test "x$NAME" = "xaprsc" ; then
		USE_DAEMON_OPTS="$DAEMON_OPTS"
		return
	fi
	
	if test -z "$DAEMON_OPTS_BASE"; then
		log_failure_msg "  defaults file does not set DAEMON_OPTS_BASE !"
		log_end_msg 1
		exit 1
	fi
	
	VNAME="\$DAEMON_OPTS_$CFGNAME"
	eval "ADD=$VNAME"
	
	USE_DAEMON_OPTS="$DAEMON_OPTS_BASE $ADD -n $NAME -c etc/$NAME.conf"
}

# check configuration of a single aprsc instance
check_configuration() {
	prepare_opts
	
	if ! $DAEMON $USE_DAEMON_OPTS -y > /dev/null 2>&1; then
		$DAEMON $USE_DAEMON_OPTS -y || true
		log_end_msg 1
		exit 1
	fi
}

# start a single aprsc instance
start_aprsc () {
	prepare_opts
	
	if start-stop-daemon --start --quiet --oknodo --pidfile $LOG_DIR/$PIDNAME.pid --exec $DAEMON -- $USE_DAEMON_OPTS; then
		log_end_msg 0
	else
		log_end_msg 1
	fi
}

# stop a single aprsc instance
stop_aprsc () {
	prepare_opts
	
	if start-stop-daemon --stop --quiet --pidfile $PIDFILE --exec $DAEMON --oknodo --retry 15; then
		rm -f $PIDFILE
		log_end_msg 0
	else
		log_end_msg 1
	fi
}

# send a $SIGNAL to a single instance
signal_aprsc () {
	prepare_opts
	
	if start-stop-daemon --stop --signal $SIGNAL --quiet --pidfile $LOG_DIR/$PIDNAME.pid --exec $DAEMON; then
		log_end_msg 0
	else
		log_end_msg 1
	fi
}

# perform an action (stop, signal) on one or more currently running instances
instance_action () {
	ACTION="$1"
	ADESC="$2"
	shift
	shift
	if test -z "$2" ; then
		PIDFILE=
		for PIDFILE in `ls $LOG_DIR/aprsc*.pid 2> /dev/null`; do
			NAME=`echo $PIDFILE | cut -c17-`
			NAME=${NAME%%.pid}
			log_daemon_msg "  $ADESC aprsc '$NAME'"
			eval $ACTION
		done
		if test -z "$PIDFILE" ; then
			log_warning_msg "  No aprsc is running."
		fi
	else
		while shift ; do
			[ -z "$1" ] && break
			PIDFILE="$LOG_DIR/$1.pid"
			if test -e $PIDFILE ; then
				log_daemon_msg "  $ADESC aprsc '$1'"
				PIDFILE=`ls $PIDFILE 2> /dev/null`
				NAME=`echo $PIDFILE | cut -c17-`
				NAME=${NAME%%.pid}
				eval $ACTION
			else
				log_failure_msg "  $ADESC aprsc '$1': No such aprsc is running."
			fi
		done
	fi
}

# start one or more instances
start_action () {
	ACTION="$1"
	ADESC="$2"
	shift
	shift
	
  	ulimit -c unlimited
  	if test -z "$2" ; then
        	# automatic startup of all or configured instances
                if test -z "$AUTOSTART" -o "x$AUTOSTART" = "xnone" ; then
                        log_warning_msg "  AUTOSTART is disabled, aprsc will not be started."
                        exit 0
                fi
                if test -z "$AUTOSTART" -o "x$AUTOSTART" = "xall" ; then
                        for CFGFILE in `cd $CONFIG_DIR; ls aprsc.conf aprsc-*.conf 2> /dev/null`; do
                                NAME=${CFGFILE%%.conf}
                                log_daemon_msg "  $ADESC '$NAME'"
                                eval $ACTION
                        done
                else
                        for NAME in $AUTOSTART ; do
                                if test -e $CONFIG_DIR/$NAME.conf ; then
                                        log_daemon_msg "  $ADESC '$NAME'"
					eval $ACTION
                                else
                                        log_failure_msg "  $ADESC '$NAME': missing $CONFIG_DIR/$NAME.conf file !"
                                        STATUS=1
                                fi
                        done
                fi
        else
		# start specific instances
                while shift ; do
                	[ -z "$1" ] && break
                	NAME=$1
                	if test -e $CONFIG_DIR/$NAME.conf ; then
                		log_daemon_msg "  $ADESC '$NAME'"
				eval $ACTION
                	else
                		log_failure_msg "  $ADESC '$NAME': missing $CONFIG_DIR/$NAME.conf file !"
                		STATUS=1
                	fi
                done
	fi
}

case "$1" in
  start)
	set -e
	prepare_chroot
  	start_action "check_configuration" "Checking configuration" $@
  	log_daemon_msg "Starting $DESC:" "aprsc"
  	
  	start_action "start_aprsc" "Starting" $@
	;;
  stop)
	log_action_begin_msg "Stopping $DESC"
	instance_action "stop_aprsc" "Stopping" $@
	;;
  graceful | reload | force-reload )
  	log_daemon_msg "Reloading $DESC configuration files:" "aprsc"
  	SIGNAL=USR1
	instance_action "signal_aprsc" "Reloading" $@
	;;
  liveupgrade )
	prepare_chroot
  	log_daemon_msg "Performing $DESC live upgrade:" "aprsc"
  	start_action "check_configuration" "Checking configuration" $@
  	SIGNAL=USR2
	instance_action "signal_aprsc" "Upgrading" $@
	echo "Black magic invoked - live upgrade triggered."
	echo "Remember to check $LOG_DIR/aprsc.log for any errors!"
	;;
  restart)
  	log_action_begin_msg "Stopping $DESC"
  	start_action "check_configuration" "Checking configuration" $@
	instance_action "stop_aprsc" "Stopping" $@
	
	prepare_chroot
  	start_action "start_aprsc" "Restarting" $@
	;;
  *)
	N=/etc/init.d/$NAME
	echo "Usage: $N {start|stop|restart|reload|liveupgrade|force-reload}" >&2
	exit 1
	;;
esac

exit 0
